name: Build and Release Electron App

permissions:
  contents: write

on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            platform: win
            artifact-name: windows-build
            executable-path: dist/executables/dFusion DLP miner Setup 0.1.0.exe

          - os: ubuntu-latest
            platform: linux
            artifact-name: linux-build
            executable-path: dist/executables/dFusion-DLP-miner.AppImage  # Adjust based on your build output

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build & package renderer (vpsl-miner) and Electron app ${{ matrix.platform }}
        run: npx nx package electron

      - name: Make Electron app ${{ matrix.platform }}
        run: npx nx run electron:make
        shell: bash

      # - name: Ensure Linux executable permissions
      #   if: matrix.platform == 'linux'
      #   run: chmod +x ${{ matrix.executable-path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.executable-path }}

      - name: Debug directory structure
        run: |
          echo "Root Directory:"
          ls -la
          echo "Dist Directory:"
          ls -la dist
          echo "Executables Directory:"
          ls -la dist/executables
        shell: bash

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Changes in this Release:
            - Latest miner build
          draft: false
          prerelease: false
          files: artifacts/**/*
